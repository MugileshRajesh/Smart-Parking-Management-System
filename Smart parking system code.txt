Smart parking system code
import 'dart:convert';
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:http/http.dart' as http;

void main() {
  runApp(const SmartParkingApp());
}

class SmartParkingApp extends StatelessWidget {
  const SmartParkingApp();

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'SPMS PROJECT',
      theme: ThemeData(
        primarySwatch: Colors.green,
        fontFamily: 'Inter',
        useMaterial3: true,
      ),
      home: const ParkingStatusPage(),
    );
  }
}

class ParkingStatusPage extends StatefulWidget {
  const ParkingStatusPage();

  @override
  _ParkingStatusPageState createState() => _ParkingStatusPageState();
}

class _ParkingStatusPageState extends State<ParkingStatusPage> {
  // Replace with the actual IP address of your ESP32
  static const String esp32Ip = '[http://192.168.1.100](http://192.168.1.100)';
  final int numSlots = 4;
  List<bool> slotStatus = List.generate(4, (index) => false);
  Timer? timer;

  @override
  void initState() {
    super.initState();
    // Start fetching data every 3 seconds
    timer = Timer.periodic(const Duration(seconds: 3), (Timer t) => fetchParkingStatus());
  }

  @override
  void dispose() {
    // Cancel the timer when the widget is disposed
    timer?.cancel();
    super.dispose();
  }

  Future<void> fetchParkingStatus() async {
    try {
      final response = await http.get(Uri.parse('$esp32Ip/status'));

      if (response.statusCode == 200) {
        // Parse the JSON response from the ESP32
        final Map<String, dynamic> data = jsonDecode(response.body);
        setState(() {
          slotStatus = List<bool>.from(data['slots']);
        });
      } else {
        throw Exception('Failed to load parking status');
      }
    } catch (e) {
      // Handle errors, e.g., print to console
      print('Error fetching data: $e');
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text(
          'SPMS PROJECT',
          style: TextStyle(fontWeight: FontWeight.bold),
        ),
        centerTitle: true,
      ),
      body: Padding(
        padding: const EdgeInsets.all(24.0),
        child: Column(
          children: [
            Expanded(
              child: Center(
                child: GridView.builder(
                  shrinkWrap: true,
                  physics: const NeverScrollableScrollPhysics(),
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    childAspectRatio: 1.2,
                    crossAxisSpacing: 16.0,
                    mainAxisSpacing: 16.0,
                  ),
                  itemCount: numSlots,
                  itemBuilder: (context, index) {
                    final isOccupied = slotStatus[index];
                    return ParkingSlot(
                      slotNumber: index + 1,
                      isOccupied: isOccupied,
                    );
                  },
                ),
              ),
            ),
            const SizedBox(height: 32),
            const Legend(),
          ],
        ),
      ),
    );
  }
}

class ParkingSlot extends StatelessWidget {
  final int slotNumber;
  final bool isOccupied;

  const ParkingSlot({
    required this.slotNumber,
    required this.isOccupied,
  });

  @override
  Widget build(BuildContext context) {
    return Card(
      elevation: 4,
      shape: RoundedRectangleBorder(
        borderRadius: BorderRadius.circular(16.0),
      ),
      child: Container(
        decoration: BoxDecoration(
          color: isOccupied ? Colors.redAccent : Colors.green,
          borderRadius: BorderRadius.circular(16.0),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              spreadRadius: 2,
              blurRadius: 5,
              offset: const Offset(0, 3),
            ),
          ],
        ),
        child: Center(
          child: Text(
            'Slot $slotNumber',
            style: const TextStyle(
              color: Colors.white,
              fontSize: 24,
              fontWeight: FontWeight.bold,
            ),
          ),
        ),
      ),
    );
  }
}

class Legend extends StatelessWidget {
  const Legend();

  @override
  Widget build(BuildContext context) {
    return Row(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        _buildLegendItem(Colors.redAccent, 'Occupied'),
        const SizedBox(width: 24),
        _buildLegendItem(Colors.green, 'Vacant'),
      ],
    );
  }

  Widget _buildLegendItem(Color color, String text) {
    return Row(
      children: [
        Container(
          width: 20,
          height: 20,
          decoration: BoxDecoration(
            color: color,
            borderRadius: BorderRadius.circular(4),
          ),
        ),
        const SizedBox(width: 8),
        Text(
          text,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
          ),
        ),
      ],
    );
  }
}